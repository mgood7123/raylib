if(WIN32)
    if(${CMAKE_SYSTEM_NAME} STREQUAL "WindowsStore")
        add_definitions(-DPLATFORM_UNIVERSAL_WINDOWS)
        set(PLATFORM_UNIVERSAL_WINDOWS TRUE CACHE INTERNAL "Target platform: Windows Store")
        message("Target platform: Universal Windows. SDK Version: " ${CMAKE_SYSTEM_VERSION})
    else()
        set(PLATFORM_WIN32 TRUE CACHE INTERNAL "Target platform: Win32") #WIN32 is a variable, so we cannot use string "WIN32"
    endif()
else()
    if(${CMAKE_SYSTEM_NAME} STREQUAL "Android")
        set(PLATFORM_ANDROID TRUE CACHE INTERNAL "Target platform: Android")
    elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
        set(PLATFORM_LINUX TRUE CACHE INTERNAL "Target platform: Linux")
    elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
        if(IOS)
            set(PLATFORM_IOS TRUE CACHE INTERNAL "Target platform: iOS")
        else()
            set(PLATFORM_MACOS TRUE CACHE INTERNAL "Target platform: MacOS")
        endif()
    elseif(${CMAKE_SYSTEM_NAME} STREQUAL "iOS")
        set(PLATFORM_IOS TRUE CACHE INTERNAL "Target platform: iOS")
    endif()
endif(WIN32)

if(PLATFORM_MACOS OR PLATFORM_IOS OR PLATFORM_TVOS)
    set(PLATFORM_APPLE TRUE CACHE INTERNAL "Apple platform (macOS, iOS, or tvOS)")
endif()

if (PLATFORM_MACOS OR PLATFORM_LINUX OR PLATFORM_WIN32)
    set(PLATFORM_DESKTOP TRUE "Desktop platform (Windows, Linux, or macOS)")
    add_definitions(-DPLATFORM_DESKTOP)
endif()

if (PLATFORM_MACOS OR PLATFORM_IOS) # iOS too?
    if (PLATFORM_MACOS)
        add_definitions(-DPLATFORM_APPLE -DGL_SILENCE_DEPRECATION)
        set(PLATFORM_CPP "PLATFORM_MACOS")
    else()
        add_definitions(-DPLATFORM_IOS)
        set(PLATFORM_CPP "PLATFORM_IOS")
    endif()
    # Need to force OpenGL 3.3 on OS X
    # See: https://github.com/raysan5/raylib/issues/341
    set(GRAPHICS "GRAPHICS_API_OPENGL_33")
    find_library(OPENGL_LIBRARY OpenGL)
    set(LIBS_PRIVATE ${OPENGL_LIBRARY})
    link_libraries("${LIBS_PRIVATE}")
    if (NOT CMAKE_SYSTEM STRLESS "Darwin-18.0.0")
        add_definitions(-DGL_SILENCE_DEPRECATION)
        MESSAGE(AUTHOR_WARNING "OpenGL is deprecated starting with macOS 10.14 (Mojave)!")
    endif ()
elseif (PLATFORM_WIN32)
    add_definitions(-DPLATFORM_WIN32)
    set(PLATFORM_CPP "PLATFORM_WINDOWS")
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
    find_package(OpenGL QUIET)
    set(LIBS_PRIVATE ${OPENGL_LIBRARIES} winmm)
elseif (PLATFORM_LINUX)
    add_definitions(-DPLATFORM_LINUX)
    set(PLATFORM_CPP "PLATFORM_LINUX")
    find_library(pthread NAMES pthread)
    find_package(OpenGL QUIET)
    if ("${OPENGL_LIBRARIES}" STREQUAL "")
        set(OPENGL_LIBRARIES "GL")
    endif ()

    if ("${CMAKE_SYSTEM_NAME}" MATCHES "(Net|Open)BSD")
        find_library(OSS_LIBRARY ossaudio)
    endif ()

    set(LIBS_PRIVATE m pthread ${OPENGL_LIBRARIES} ${OSS_LIBRARY})
elseif(PLATFORM_ANDROID)
    add_definitions(-DPLATFORM_ANDROID)
    set(PLATFORM_CPP "PLATFORM_ANDROID")
    set(GRAPHICS "GRAPHICS_API_OPENGL_ES2")
    set(LIBS_PRIVATE m log android EGL GLESv2 OpenSLES atomic c)
    include_directories(${ANDROID_NDK}/sources/android/native_app_glue)

elseif (${PLATFORM} MATCHES "Web")
    add_definitions(-DPLATFORM_WEB)
    set(PLATFORM_CPP "PLATFORM_WEB")
    set(GRAPHICS "GRAPHICS_API_OPENGL_ES2")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -s USE_GLFW=3 -s ASSERTIONS=1 --profiling")
    set(CMAKE_STATIC_LIBRARY_SUFFIX ".a")

elseif (${PLATFORM} MATCHES "Raspberry Pi")
    add_definitions(-DPLATFORM_RPI)
    set(PLATFORM_CPP "PLATFORM_RPI")
    set(GRAPHICS "GRAPHICS_API_OPENGL_ES2")

    add_definitions(-D_DEFAULT_SOURCE)

    find_library(GLESV2 brcmGLESv2 HINTS /opt/vc/lib)
    find_library(EGL brcmEGL HINTS /opt/vc/lib)
    find_library(BCMHOST bcm_host HINTS /opt/vc/lib)
    include_directories(/opt/vc/include /opt/vc/include/interface/vmcs_host/linux /opt/vc/include/interface/vcos/pthreads)
    link_directories(/opt/vc/lib)
    set(LIBS_PRIVATE ${GLESV2} ${EGL} ${BCMHOST} pthread rt m dl)

elseif (${PLATFORM} MATCHES "DRM")
    set(PLATFORM_CPP "PLATFORM_DRM")
    set(GRAPHICS "GRAPHICS_API_OPENGL_ES2")

    add_definitions(-D_DEFAULT_SOURCE)
    add_definitions(-DEGL_NO_X11)
    add_definitions(-DPLATFORM_DRM)
    
    find_library(GLESV2 GLESv2)
    find_library(EGL EGL)
    find_library(DRM drm)
    find_library(GBM gbm)
    
    if (NOT CMAKE_CROSSCOMPILING)
        include_directories(/usr/include/libdrm)
    endif ()
    set(LIBS_PRIVATE ${GLESV2} ${EGL} ${DRM} ${GBM} pthread m dl)

else()
    message(FATAL_ERROR "Unsupported platform")
endif ()

if (${OPENGL_VERSION})
    set(${SUGGESTED_GRAPHICS} "${GRAPHICS}")
    if (${OPENGL_VERSION} MATCHES "3.3")
        set(GRAPHICS "GRAPHICS_API_OPENGL_33")
    elseif (${OPENGL_VERSION} MATCHES "2.1")
        set(GRAPHICS "GRAPHICS_API_OPENGL_21")
    elseif (${OPENGL_VERSION} MATCHES "1.1")
        set(GRAPHICS "GRAPHICS_API_OPENGL_11")
    elseif (${OPENGL_VERSION} MATCHES "ES 2.0")
        set(GRAPHICS "GRAPHICS_API_OPENGL_ES2")
    endif ()
    if ("${SUGGESTED_GRAPHICS}" AND NOT "${SUGGESTED_GRAPHICS}" STREQUAL "${GRAPHICS}")
        message(WARNING "You are overriding the suggested GRAPHICS=${SUGGESTED_GRAPHICS} with ${GRAPHICS}! This may fail")
    endif ()
endif ()

if (NOT GRAPHICS)
    set(GRAPHICS "GRAPHICS_API_OPENGL_33")
endif ()

set(LIBS_PRIVATE ${LIBS_PRIVATE} ${OPENAL_LIBRARY})

if (PLATFORM_DESKTOP)
    set(LIBS_PRIVATE ${LIBS_PRIVATE} glfw)
endif ()